Design code
module mux4to1 (
    input wire I0, I1, I2, I3,
    input wire S0, S1,
    output wire Y
);
    wire w0, w1, w2, w3;
    wire notS0, notS1;

    not (notS0, S0);
    not (notS1, S1);

    and (w0, I0, notS1, notS0);
    and (w1, I1, notS1, S0);
    and (w2, I2, S1, notS0);
    and (w3, I3, S1, S0);

    or (Y, w0, w1, w2, w3);
endmodule

Test bench code
module tb_mux4to1;
    reg I0, I1, I2, I3;
    reg S0, S1;
    wire Y;

    mux4to1 uut (
        .I0(I0), .I1(I1), .I2(I2), .I3(I3),
        .S0(S0), .S1(S1),
        .Y(Y)
    );

    initial begin
        $dumpfile("dump.vcd");
        $dumpvars(0, tb_mux4to1);

        $display("S1 S0 | Y");

        I0 = 1; I1 = 0; I2 = 0; I3 = 0; S1 = 0; S0 = 0; #10; $display("%b %b | %b", S1, S0, Y);
        I0 = 0; I1 = 1; I2 = 0; I3 = 0; S1 = 0; S0 = 1; #10; $display("%b %b | %b", S1, S0, Y);
        I0 = 0; I1 = 0; I2 = 1; I3 = 0; S1 = 1; S0 = 0; #10; $display("%b %b | %b", S1, S0, Y);
        I0 = 0; I1 = 0; I2 = 0; I3 = 1; S1 = 1; S0 = 1; #10; $display("%b %b | %b", S1, S0, Y);

        $finish;
    end
endmodule
